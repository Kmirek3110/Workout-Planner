{"ast":null,"code":"var _jsxFileName = \"/home/karol/Documents/Engenieer_plan/tesis/thesis/frontend/src/components/PlanList.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport WorkoutForm from './WorkoutForm';\nimport { useParams } from 'react-router-dom';\nimport { useHistory } from 'react-router-dom';\nimport { useCookies } from 'react-cookie';\nimport PlanForm from './PlanForm';\nimport APIService from '../APIService';\nimport FinishedForm from './FinishedForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PlanList(props) {\n  _s();\n\n  let history = useHistory();\n  const [token] = useCookies(['mytoken']);\n  const [clicked, setClicked] = useState(false);\n  const [generate, setGenerate] = useState(false);\n  const [plans, setPlans] = useState([]);\n  const [chosenPlan, setChosenPlan] = useState(\"\");\n  const [showDoneForm, setShowDoneForm] = useState(false);\n\n  const PlanDoneForm = plan => {\n    setShowDoneForm(!showDoneForm);\n    setChosenPlan(plan.id);\n  };\n\n  useEffect(() => {\n    fetch('http://127.0.0.1:8000/plans-list', {\n      'method': 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Token ${token['mytoken']}`\n      }\n    }).then(resp => resp.json()).then(resp => setPlans(resp));\n  }, []);\n\n  const buttonHandler = option => {\n    if (option == 0) {\n      setClicked(current => !current);\n    } else if (option == 1) {\n      setGenerate(current => !current);\n    }\n  };\n\n  const dltPlan = plan => {\n    const new_plans = plans.filter(myplan => {\n      if (myplan.id === plan.id) {\n        return false;\n      }\n\n      return true;\n    });\n    setPlans(new_plans);\n  };\n\n  const DeletePlan = plan => {\n    APIService.PlanDelete(token['mytoken'], plan.id).then(dltPlan(plan)).catch(error => console.log(error));\n  };\n\n  const addNewPlan = plan => {\n    setPlans(plans => [...plans, plan]);\n    setClicked(current => !current);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: plans && plans.map(plan => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"PlanElement\",\n            onClick: () => history.push(`/plan/${plan.id}`),\n            children: plan.plan_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"column\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-danger \",\n              onClick: () => DeletePlan(plan),\n              children: \" Delete Plan\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-dark\",\n              onClick: () => PlanDoneForm(plan),\n              children: \" Plan Instance Done\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 21\n            }, this), showDoneForm && chosenPlan == plan.id && /*#__PURE__*/_jsxDEV(FinishedForm, {\n              plan: plan\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 65\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), clicked ? /*#__PURE__*/_jsxDEV(PlanForm, {\n      addNew: addNewPlan\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 20\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 56\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Row\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        class: \"btn btn-success middle\",\n        onClick: () => buttonHandler(0),\n        children: \"Create new Training Plan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        class: \"btn btn-primary right\",\n        onClick: () => buttonHandler(1),\n        children: \"Generate Custom Training Plan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PlanList, \"jqeuJGmMsE+Y2jl16UaZG1bwt08=\", false, function () {\n  return [useHistory, useCookies];\n});\n\n_c = PlanList;\nPlanList.propTypes = {};\nexport default PlanList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlanList\");","map":{"version":3,"sources":["/home/karol/Documents/Engenieer_plan/tesis/thesis/frontend/src/components/PlanList.js"],"names":["React","PropTypes","useState","useEffect","WorkoutForm","useParams","useHistory","useCookies","PlanForm","APIService","FinishedForm","PlanList","props","history","token","clicked","setClicked","generate","setGenerate","plans","setPlans","chosenPlan","setChosenPlan","showDoneForm","setShowDoneForm","PlanDoneForm","plan","id","fetch","headers","then","resp","json","buttonHandler","option","current","dltPlan","new_plans","filter","myplan","DeletePlan","PlanDelete","catch","error","console","log","addNewPlan","map","push","plan_name","propTypes"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAAQC,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,SAAQC,UAAR,QAAyB,cAAzB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AAErB,MAAIC,OAAO,GAAGP,UAAU,EAAxB;AACA,QAAM,CAACQ,KAAD,IAAUP,UAAU,CAAC,CAAC,SAAD,CAAD,CAA1B;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACe,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACiB,KAAD,EAAQC,QAAR,IAAoBlB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACmB,UAAD,EAAYC,aAAZ,IAA6BpB,QAAQ,CAAC,EAAD,CAA3C;AACA,QAAM,CAACqB,YAAD,EAAeC,eAAf,IAAkCtB,QAAQ,CAAC,KAAD,CAAhD;;AAEE,QAAMuB,YAAY,GAAIC,IAAD,IAAU;AAC7BF,IAAAA,eAAe,CAAC,CAACD,YAAF,CAAf;AACAD,IAAAA,aAAa,CAACI,IAAI,CAACC,EAAN,CAAb;AACH,GAHC;;AAMFxB,EAAAA,SAAS,CAAC,MAAM;AACZyB,IAAAA,KAAK,CAAC,kCAAD,EAAqC;AAC5C,gBAAS,KADmC;AAE5CC,MAAAA,OAAO,EAAE;AACP,wBAAe,kBADR;AAEP,yBAAiB,SAAQf,KAAK,CAAC,SAAD,CAAY;AAFnC;AAFmC,KAArC,CAAL,CAQHgB,IARG,CAQEC,IAAI,IAAIA,IAAI,CAACC,IAAL,EARV,EASHF,IATG,CASEC,IAAI,IAAIX,QAAQ,CAACW,IAAD,CATlB;AAWH,GAZQ,EAYN,EAZM,CAAT;;AAcA,QAAME,aAAa,GAAIC,MAAD,IAAY;AAChC,QAAGA,MAAM,IAAI,CAAb,EAAe;AACblB,MAAAA,UAAU,CAACmB,OAAO,IAAI,CAACA,OAAb,CAAV;AACD,KAFD,MAGK,IAAID,MAAM,IAAI,CAAd,EAAgB;AACnBhB,MAAAA,WAAW,CAACiB,OAAO,IAAI,CAACA,OAAb,CAAX;AACD;AACF,GAPD;;AASA,QAAMC,OAAO,GAAIV,IAAD,IAAU;AACtB,UAAMW,SAAS,GAAGlB,KAAK,CAACmB,MAAN,CAAaC,MAAM,IAAI;AACvC,UAAGA,MAAM,CAACZ,EAAP,KAAcD,IAAI,CAACC,EAAtB,EAA0B;AACxB,eAAO,KAAP;AACD;;AACD,aAAO,IAAP;AACD,KALiB,CAAlB;AAMAP,IAAAA,QAAQ,CAACiB,SAAD,CAAR;AACD,GARH;;AAUA,QAAMG,UAAU,GAAId,IAAD,IAAU;AACzBjB,IAAAA,UAAU,CAACgC,UAAX,CAAsB3B,KAAK,CAAC,SAAD,CAA3B,EAAuCY,IAAI,CAACC,EAA5C,EACCG,IADD,CACMM,OAAO,CAACV,IAAD,CADb,EAECgB,KAFD,CAEOC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAFhB;AAGH,GAJD;;AAMA,QAAMG,UAAU,GAAIpB,IAAD,IAAU;AACzBN,IAAAA,QAAQ,CAACD,KAAK,IAAI,CAAC,GAAGA,KAAJ,EAAUO,IAAV,CAAV,CAAR;AACAV,IAAAA,UAAU,CAACmB,OAAO,IAAI,CAACA,OAAb,CAAV;AACH,GAHD;;AAMA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,gBACHhB,KAAK,IAAIA,KAAK,CAAC4B,GAAN,CAAUrB,IAAI,IAAI;AACxB,4BACI;AAAA,kCAEA;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAsB,YAAA,SAAS,EAAC,aAAhC;AAA8C,YAAA,OAAO,EAAE,MAAMb,OAAO,CAACmC,IAAR,CAAc,SAAQtB,IAAI,CAACC,EAAG,EAA9B,CAA7D;AAAA,sBAAgGD,IAAI,CAACuB;AAArG;AAAA;AAAA;AAAA;AAAA,kBAFA,eAII;AAAK,YAAA,SAAS,EAAC,QAAf;AAAA,oCACA;AAAQ,cAAA,SAAS,EAAG,iBAApB;AAAsC,cAAA,OAAO,EAAE,MAAMT,UAAU,CAACd,IAAD,CAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADA,eAEA;AAAQ,cAAA,SAAS,EAAG,cAApB;AAAmC,cAAA,OAAO,EAAK,MAAMD,YAAY,CAACC,IAAD,CAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFA,EAGCH,YAAY,IAAKF,UAAU,IAAIK,IAAI,CAACC,EAApC,iBAA2C,QAAC,YAAD;AAAc,cAAA,IAAI,EAAED;AAApB;AAAA;AAAA;AAAA;AAAA,oBAH5C;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ;AAaH,OAdS;AADN;AAAA;AAAA;AAAA;AAAA,YAHJ,EAqBCX,OAAO,gBAAG,QAAC,QAAD;AAAU,MAAA,MAAM,EAAI+B;AAApB;AAAA;AAAA;AAAA;AAAA,YAAH,gBAAuC;AAAA;AAAA;AAAA;AAAA,YArB/C,eAsBA;AAAK,MAAA,SAAS,EAAE,KAAhB;AAAA,8BAEA;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,KAAK,EAAC,wBAA5B;AAAqD,QAAA,OAAO,EAAE,MAAMb,aAAa,CAAC,CAAD,CAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFA,eAMA;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,KAAK,EAAC,uBAA5B;AAAoD,QAAA,OAAO,EAAE,MAAMA,aAAa,CAAC,CAAD,CAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANA;AAAA;AAAA;AAAA;AAAA;AAAA,YAtBA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAoCH;;GAjGQtB,Q;UAESL,U,EACEC,U;;;KAHXI,Q;AAmGTA,QAAQ,CAACuC,SAAT,GAAqB,EAArB;AAIA,eAAevC,QAAf","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport {useState, useEffect} from 'react'\nimport WorkoutForm from './WorkoutForm'\nimport { useParams } from 'react-router-dom';\nimport {useHistory} from 'react-router-dom';\nimport {useCookies} from 'react-cookie';\nimport PlanForm from './PlanForm';\nimport APIService from '../APIService';\nimport FinishedForm from './FinishedForm';\n\nfunction PlanList(props) {\n\n    let history = useHistory()\n    const [token] = useCookies(['mytoken'])\n    const [clicked, setClicked] = useState(false)\n    const [generate, setGenerate] = useState(false)\n    const [plans, setPlans] = useState([])\n    const [chosenPlan,setChosenPlan] = useState(\"\")\n    const [showDoneForm, setShowDoneForm] = useState(false)\n\n      const PlanDoneForm = (plan) => {\n        setShowDoneForm(!showDoneForm);\n        setChosenPlan(plan.id)\n    }\n\n    \n    useEffect(() => {\n        fetch('http://127.0.0.1:8000/plans-list', {\n      'method':'GET',\n      headers: {\n        'Content-Type':'application/json',\n        'Authorization':`Token ${token['mytoken']}`,\n\n      }\n    })\n    .then(resp => resp.json())\n    .then(resp => setPlans(resp))\n   \n    }, [])\n\n    const buttonHandler = (option) => {\n      if(option == 0){\n        setClicked(current => !current)\n      }\n      else if (option == 1){\n        setGenerate(current => !current)\n      }\n    }\n\n    const dltPlan = (plan) => {\n        const new_plans = plans.filter(myplan => {\n          if(myplan.id === plan.id) {\n            return false\n          }\n          return true;\n        })\n        setPlans(new_plans)\n      }\n\n    const DeletePlan = (plan) => {\n        APIService.PlanDelete(token['mytoken'],plan.id)\n        .then(dltPlan(plan))\n        .catch(error => console.log(error))\n    }\n\n    const addNewPlan = (plan) => {\n        setPlans(plans => [...plans,plan])\n        setClicked(current => !current)\n    }\n\n\n    return (\n        <div>  \n            <br/>\n            <br/>\n            <div className=\"row\">\n        {plans && plans.map(plan => {           \n            return(\n                <div>\n                \n                <button type=\"button\" className=\"PlanElement\" onClick={() => history.push(`/plan/${plan.id}`)}>{plan.plan_name}\n                    </ button>\n                    <div className=\"column\">\n                    <button className = \"btn btn-danger \" onClick={() => DeletePlan(plan)}> Delete Plan</button>\n                    <button className = \"btn btn-dark\" onClick  = {() => PlanDoneForm(plan)}> Plan Instance Done</button>\n                    {showDoneForm && (chosenPlan == plan.id) && <FinishedForm plan={plan}/>}\n                    </div>                 \n                </div>\n            )\n            \n        })}\n        </div>\n     \n        {clicked ? <PlanForm addNew = {addNewPlan} /> :<div/> }\n        <div className =\"Row\" >\n\n        <button type=\"button\" class=\"btn btn-success middle\" onClick={() => buttonHandler(0)} >\n            Create new Training Plan\n        </button>\n\n        <button type=\"button\" class=\"btn btn-primary right\" onClick={() => buttonHandler(1)} >\n            Generate Custom Training Plan\n        </button>\n        </div>\n        \n        </div>\n    )\n}\n\nPlanList.propTypes = {\n\n}\n\nexport default PlanList\n\n"]},"metadata":{},"sourceType":"module"}