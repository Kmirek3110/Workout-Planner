{"ast":null,"code":"import _slicedToArray from\"/home/karol/Documents/Engenieer_plan/tesis/thesis/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{useCookies}from'react-cookie';import{Line}from'react-chartjs-2';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function FinishedList(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),finished=_useState2[0],setFinished=_useState2[1];var _useCookies=useCookies(['mytoken']),_useCookies2=_slicedToArray(_useCookies,1),token=_useCookies2[0];useEffect(function(){fetch('http://127.0.0.1:8000/api/finished-list',{'method':'GET',headers:{'Content-Type':'application/json','Authorization':\"Token \".concat(token['mytoken'])}}).then(function(resp){return resp.json();}).then(function(resp){return setFinished(resp);});},[token]);console.log(finished);var value=finished.map(function(item){return item.progress;});var data={labels:['01','02','03','04','05','06'],datasets:[{label:'X',data:value,backgroundColor:['rgba(255, 99, 132, 0.2)'],borderColor:['rgba(255, 99, 132, 1)'],borderWidth:1}]};var dict=new Object();{finished&&finished.forEach(function(element){if(element.plan.plan_name in dict){dict[element.plan.plan_name].push(element.progress);}else{dict[element.plan.plan_name]=[];}});}console.log(finished);console.log(Object.entries(dict),\"DICT\");return/*#__PURE__*/_jsx(\"div\",{children:finished&&Object.entries(dict).map(function(progress){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:progress[0]}),/*#__PURE__*/_jsx(Line,{data:{labels:['01','02','03','04','05','06'],datasets:[{label:'X',data:progress[1],backgroundColor:['rgba(255, 99, 132, 0.2)'],borderColor:['rgba(255, 99, 132, 1)'],borderWidth:1}]}})]});})});}export default FinishedList;","map":{"version":3,"sources":["/home/karol/Documents/Engenieer_plan/tesis/thesis/frontend/src/components/FinishedList.js"],"names":["React","useState","useEffect","useCookies","Line","FinishedList","finished","setFinished","token","fetch","headers","then","resp","json","console","log","value","map","item","progress","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","dict","Object","forEach","element","plan","plan_name","push","entries"],"mappings":"iLAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,CAAyBC,SAAzB,KAAyC,OAAzC,CACA,OAAQC,UAAR,KAAyB,cAAzB,CACA,OAAQC,IAAR,KAAmB,iBAAnB,C,wFAEA,QAASC,CAAAA,YAAT,EAAwB,CAEpB,cAAgCJ,QAAQ,CAAC,EAAD,CAAxC,wCAAOK,QAAP,eAAiBC,WAAjB,eACA,gBAAgBJ,UAAU,CAAC,CAAC,SAAD,CAAD,CAA1B,4CAAOK,KAAP,iBAEAN,SAAS,CAAC,UAAM,CACZO,KAAK,CAAC,yCAAD,CAA4C,CAC/C,SAAS,KADsC,CAE/CC,OAAO,CAAE,CACP,eAAe,kBADR,CAEP,gCAAyBF,KAAK,CAAC,SAAD,CAA9B,CAFO,CAFsC,CAA5C,CAAL,CAOCG,IAPD,CAOM,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACC,IAAL,EAAJ,EAPV,EAQCF,IARD,CAQM,SAAAC,IAAI,QAAIL,CAAAA,WAAW,CAACK,IAAD,CAAf,EARV,EAUD,CAXM,CAWJ,CAACJ,KAAD,CAXI,CAAT,CAcAM,OAAO,CAACC,GAAR,CAAYT,QAAZ,EACA,GAAIU,CAAAA,KAAK,CAAGV,QAAQ,CAACW,GAAT,CAAa,SAASC,IAAT,CAAc,CACrC,MAAOA,CAAAA,IAAI,CAACC,QAAZ,CACD,CAFW,CAAZ,CAGA,GAAMC,CAAAA,IAAI,CAAG,CACXC,MAAM,CAAE,CAAC,IAAD,CAAO,IAAP,CAAa,IAAb,CAAmB,IAAnB,CAAyB,IAAzB,CAA+B,IAA/B,CADG,CAEXC,QAAQ,CAAE,CAAC,CACPC,KAAK,CAAE,GADA,CAEPH,IAAI,CAAEJ,KAFC,CAGPQ,eAAe,CAAE,CACb,yBADa,CAHV,CAOPC,WAAW,CAAE,CACT,uBADS,CAPN,CAWPC,WAAW,CAAE,CAXN,CAAD,CAFC,CAAb,CAgBA,GAAIC,CAAAA,IAAI,CAAG,GAAIC,CAAAA,MAAJ,EAAX,CAGA,CAACtB,QAAQ,EAAIA,QAAQ,CAACuB,OAAT,CAAiB,SAASC,OAAT,CAAiB,CAC7C,GAAIA,OAAO,CAACC,IAAR,CAAaC,SAAb,GAA0BL,CAAAA,IAA9B,CAAmC,CACjCA,IAAI,CAACG,OAAO,CAACC,IAAR,CAAaC,SAAd,CAAJ,CAA6BC,IAA7B,CAAkCH,OAAO,CAACX,QAA1C,EACC,CAFH,IAGI,CACFQ,IAAI,CAACG,OAAO,CAACC,IAAR,CAAaC,SAAd,CAAJ,CAA+B,EAA/B,CACD,CACA,CAPU,CAAZ,CAQA,CAIDlB,OAAO,CAACC,GAAR,CAAYT,QAAZ,EAEAQ,OAAO,CAACC,GAAR,CAAYa,MAAM,CAACM,OAAP,CAAeP,IAAf,CAAZ,CAAkC,MAAlC,EAEA,mBACI,qBACGrB,QAAQ,EAAKsB,MAAM,CAACM,OAAP,CAAeP,IAAf,EAAqBV,GAArB,CAAyB,SAAAE,QAAQ,CAAI,CACjD,mBACE,oCACE,oBAAKA,QAAQ,CAAC,CAAD,CAAb,EADF,cAEE,KAAC,IAAD,EAAM,IAAI,CAAI,CACVE,MAAM,CAAE,CAAC,IAAD,CAAO,IAAP,CAAa,IAAb,CAAmB,IAAnB,CAAyB,IAAzB,CAA+B,IAA/B,CADE,CAEVC,QAAQ,CAAE,CAAC,CACPC,KAAK,CAAE,GADA,CAEPH,IAAI,CAAED,QAAQ,CAAC,CAAD,CAFP,CAGPK,eAAe,CAAE,CACb,yBADa,CAHV,CAOPC,WAAW,CAAE,CACT,uBADS,CAPN,CAWPC,WAAW,CAAE,CAXN,CAAD,CAFA,CAAd,EAFF,GADF,CAoBE,CArBU,CADhB,EADJ,CA2BH,CAED,cAAerB,CAAAA,YAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport {useCookies} from 'react-cookie';\nimport {Line} from 'react-chartjs-2'\n\nfunction FinishedList() {\n\n    const [finished, setFinished] = useState([])\n    const [token] = useCookies(['mytoken'])\n\n    useEffect(() => {\n        fetch('http://127.0.0.1:8000/api/finished-list', {\n          'method':'GET',\n          headers: {\n            'Content-Type':'application/json',\n            'Authorization':`Token ${token['mytoken']}` \n        }\n        })\n        .then(resp => resp.json())\n        .then(resp => setFinished(resp))\n    \n      }, [token])\n\n\n    console.log(finished)\n    let value = finished.map(function(item){\n      return item.progress;\n    })\n    const data = {\n      labels: ['01', '02', '03', '04', '05', '06'],\n      datasets: [{\n          label: 'X',\n          data: value,\n          backgroundColor: [\n              'rgba(255, 99, 132, 0.2)'\n\n          ],\n          borderColor: [\n              'rgba(255, 99, 132, 1)'\n\n          ],\n          borderWidth: 1\n      }]\n    }\n    var dict = new Object();\n    \n    \n    {finished && finished.forEach(function(element){\n      if (element.plan.plan_name in dict){   \n        dict[element.plan.plan_name].push(element.progress)\n        }\n      else{\n        dict[element.plan.plan_name] = []\n      }\n      })\n    }\n\n    \n\n    console.log(finished)\n\n    console.log(Object.entries(dict), \"DICT\")\n    \n    return (\n        <div>\n          {finished &&  Object.entries(dict).map(progress => {\n            return (\n              <div>\n                <h3>{progress[0]}</h3>\n                <Line data = {{\n                    labels: ['01', '02', '03', '04', '05', '06'],\n                    datasets: [{\n                        label: 'X',\n                        data: progress[1],\n                        backgroundColor: [\n                            'rgba(255, 99, 132, 0.2)'\n\n                        ],\n                        borderColor: [\n                            'rgba(255, 99, 132, 1)'\n\n                        ],\n                        borderWidth: 1\n                    }]\n                  }}/>\n              </div>\n            )})\n          }\n        </div>\n    )\n}\n\nexport default FinishedList\n"]},"metadata":{},"sourceType":"module"}